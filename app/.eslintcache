[{"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\index.tsx":"1","D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\reportWebVitals.ts":"2","D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\App.tsx":"3","D:\\MEPS\\_Tests\\ffmpegwasm-electron-test\\app\\src\\index.tsx":"4","D:\\MEPS\\_Tests\\ffmpegwasm-electron-test\\app\\src\\reportWebVitals.ts":"5","D:\\MEPS\\_Tests\\ffmpegwasm-electron-test\\app\\src\\App.tsx":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":1344,"mtime":1610724808557,"results":"10","hashOfConfig":"8"},{"size":517,"mtime":1617052638657,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1617052638658,"results":"13","hashOfConfig":"12"},{"size":1390,"mtime":1617052638657,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"ax6mn2",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"68hvav",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\index.tsx",[],["29","30"],"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\reportWebVitals.ts",[],"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\App.tsx",["31","32"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { createFFmpeg, fetchFile } from \"@ffmpeg/ffmpeg\";\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState(\"\");\n  const [message, setMessage] = useState(\"Click Start to transcode\");\n  const ffmpeg = createFFmpeg({\n    log: true,\n    corePath: \"./js/ffmpeg-core.js\",\n  });\n  const doTranscode = async () => {\n    setMessage(\"Loading ffmpeg-core.js\");\n    await ffmpeg.load();\n    setMessage(\"Start transcoding\");\n    ffmpeg.FS(\"writeFile\", \"test.avi\", await fetchFile(\"/flame.avi\"));\n    await ffmpeg.run(\"-i\", \"test.avi\", \"test.mp4\");\n    setMessage(\"Complete transcoding\");\n    const data = ffmpeg.FS(\"readFile\", \"test.mp4\");\n    setVideoSrc(\n      URL.createObjectURL(new Blob([data.buffer], { type: \"video/mp4\" }))\n    );\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <button onClick={doTranscode}>Transcode</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\MEPS\\_Tests\\ffmpegwasm-electron-test\\app\\src\\index.tsx",[],"D:\\MEPS\\_Tests\\ffmpegwasm-electron-test\\app\\src\\reportWebVitals.ts",[],"D:\\MEPS\\_Tests\\ffmpegwasm-electron-test\\app\\src\\App.tsx",["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":7,"column":10,"nodeType":"41","messageId":"42","endLine":7,"endColumn":18},{"ruleId":"39","severity":1,"message":"43","line":8,"column":10,"nodeType":"41","messageId":"42","endLine":8,"endColumn":17},{"ruleId":"39","severity":1,"message":"40","line":7,"column":10,"nodeType":"41","messageId":"42","endLine":7,"endColumn":18},{"ruleId":"39","severity":1,"message":"43","line":8,"column":10,"nodeType":"41","messageId":"42","endLine":8,"endColumn":17},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'videoSrc' is assigned a value but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]