[{"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\index.tsx":"1","D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\reportWebVitals.ts":"2","D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\App.tsx":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":1344,"mtime":1610724808557,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"ax6mn2",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\index.tsx",[],["16","17"],"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\reportWebVitals.ts",[],"D:\\MEPS\\_Tests\\ffmpeg-electron\\app\\src\\App.tsx",["18","19"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { createFFmpeg, fetchFile } from \"@ffmpeg/ffmpeg\";\n\nfunction App() {\n  const [videoSrc, setVideoSrc] = useState(\"\");\n  const [message, setMessage] = useState(\"Click Start to transcode\");\n  const ffmpeg = createFFmpeg({\n    log: true,\n    corePath: \"./js/ffmpeg-core.js\",\n  });\n  const doTranscode = async () => {\n    setMessage(\"Loading ffmpeg-core.js\");\n    await ffmpeg.load();\n    setMessage(\"Start transcoding\");\n    ffmpeg.FS(\"writeFile\", \"test.avi\", await fetchFile(\"/flame.avi\"));\n    await ffmpeg.run(\"-i\", \"test.avi\", \"test.mp4\");\n    setMessage(\"Complete transcoding\");\n    const data = ffmpeg.FS(\"readFile\", \"test.mp4\");\n    setVideoSrc(\n      URL.createObjectURL(new Blob([data.buffer], { type: \"video/mp4\" }))\n    );\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n        <button onClick={doTranscode}>Transcode</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":7,"column":10,"nodeType":"26","messageId":"27","endLine":7,"endColumn":18},{"ruleId":"24","severity":1,"message":"28","line":8,"column":10,"nodeType":"26","messageId":"27","endLine":8,"endColumn":17},"no-native-reassign",["29"],"no-negated-in-lhs",["30"],"@typescript-eslint/no-unused-vars","'videoSrc' is assigned a value but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]